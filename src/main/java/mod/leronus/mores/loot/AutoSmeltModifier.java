//package mod.leronus.mores.loot;
//
//import com.mojang.serialization.Codec;
//import com.mojang.serialization.codecs.RecordCodecBuilder;
//import it.unimi.dsi.fastutil.objects.ObjectArrayList;
//import net.minecraft.world.SimpleContainer;
//import net.minecraft.world.entity.ExperienceOrb;
//import net.minecraft.world.item.ItemStack;
//import net.minecraft.world.item.crafting.RecipeType;
//import net.minecraft.world.item.crafting.SmeltingRecipe;
//import net.minecraft.world.level.storage.loot.LootContext;
//import net.minecraft.world.level.storage.loot.parameters.LootContextParams;
//import net.minecraft.world.level.storage.loot.predicates.LootItemCondition;
//import net.minecraftforge.common.loot.IGlobalLootModifier;
//import net.minecraftforge.common.loot.LootModifier;
//import net.minecraftforge.items.ItemHandlerHelper;
//import org.jetbrains.annotations.NotNull;
//
////Code adapted from https://github.com/MinecraftForge/MinecraftForge/blob/1.18.x/src/test/java/net/minecraftforge/debug/gameplay/loot/GlobalLootModifiersTest.java
////LICENSE: https://github.com/MinecraftForge/MinecraftForge/blob/1.18.x/LICENSE.txt
//
//public class AutoSmeltModifier extends LootModifier {
//    public static final Codec<AutoSmeltModifier> CODEC = RecordCodecBuilder.create(inst -> codecStart(inst).apply(inst, AutoSmeltModifier::new));
//
//    public AutoSmeltModifier(LootItemCondition[] conditions) {
//        super(conditions);
//    }
//
//    /**
//     * Applies the modifier to the generated loot (all loot conditions have already been checked
//     * and have returned true).
//     *
//     * @param generatedLoot the list of ItemStacks that will be dropped, generated by loot tables
//     * @param context       the LootContext, identical to what is passed to loot tables
//     * @return modified loot drops
//     */
//    @Override
//    protected @NotNull ObjectArrayList<ItemStack> doApply(ObjectArrayList<ItemStack> generatedLoot, LootContext context) {
//        return generatedLoot.stream().map(stack -> {
//            var smelted = context.getLevel().getRecipeManager()
//                    .getRecipeFor(RecipeType.SMELTING, new SimpleContainer(stack), context.getLevel())
//                    .map(SmeltingRecipe::getResultItem)
//                    .filter(itemStack -> !itemStack.isEmpty())
//                    .map(itemStack -> ItemHandlerHelper.copyStackWithSize(itemStack, stack.getCount() * itemStack.getCount()))
//                    .orElse(stack);
//            if (smelted != stack) {
//                ExperienceOrb.award(context.getLevel(), context.getParam(LootContextParams.ORIGIN), context.getRandom().nextInt(1));/* set to 3) + 1 for xp */
//            }
//            return smelted;
//        }).collect(ObjectArrayList.toList());
//    }
//
//    /**
//     * Returns the registered codec for this modifier
//     */
//    @Override
//    public Codec<? extends IGlobalLootModifier> codec() {
//        return ModLootModifiers.AUTO_SMELT.get();
//    }
//}