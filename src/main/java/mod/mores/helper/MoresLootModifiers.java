package mod.mores.helper;

import com.google.gson.JsonObject;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.entity.player.Inventory;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.crafting.RecipeType;
import net.minecraft.world.level.storage.loot.LootContext;
import net.minecraft.world.level.storage.loot.predicates.LootItemCondition;
import net.minecraftforge.common.loot.GlobalLootModifierSerializer;
import net.minecraftforge.common.loot.LootModifier;
import net.minecraftforge.items.ItemHandlerHelper;

import javax.annotation.Nonnull;
import java.util.ArrayList;
import java.util.List;

public class MoresLootModifiers
{

    public static class AutoSmeltLootModifier extends LootModifier
    {

        protected AutoSmeltLootModifier(LootItemCondition[] conditionsIn)
        {
            super(conditionsIn);
        }

        /**
         * Applies the modifier to the generated loot (all loot conditions have already been checked
         * and have returned true).
         *
         * @param generatedLoot the list of ItemStacks that will be dropped, generated by loot tables
         * @param context       the LootContext, identical to what is passed to loot tables
         * @return modified loot drops
         */
        @Nonnull
        @Override
        protected List<ItemStack> doApply(List<ItemStack> generatedLoot, LootContext context) {
            return null;
        }

        //TODO Fix doApply
//        @Nonnull
//        @Override
//        protected List<ItemStack> doApply(List<ItemStack> generatedLoot, LootContext context)
//        {
//            ArrayList<ItemStack> ret = new ArrayList<ItemStack>();
//            generatedLoot.forEach((stack) -> ret.add(smelt(stack, context)));
//            return ret;
//        }

//        protected static ItemStack smelt(ItemStack stack, LootContext context)
//        {
//            return context.getLevel().getRecipeManager()
//                    .getRecipeFor(RecipeType.SMELTING, new Inventory(stack),context.getLevel())
//                    .map(Fur::getResultItem)
//                    .filter(itemStack -> !itemStack.isEmpty())
//                    .map(itemStack -> ItemHandlerHelper.copyStackWithSize(itemStack, stack.getCount() * itemStack.getCount()))
//                    .orElse(stack);
//        }

        public static class Serializer extends GlobalLootModifierSerializer<AutoSmeltLootModifier>
        {

            @Override
            public AutoSmeltLootModifier read(ResourceLocation location, JsonObject object,
                                              LootItemCondition[] ailootcondition)
            {
                return new AutoSmeltLootModifier(ailootcondition);
            }

            @Override
            public JsonObject write(AutoSmeltLootModifier instance)
            {
                return makeConditions(instance.conditions);
            }

        } // end class Serializer

    } // end class AutoSmeltLootModifier

} // end class